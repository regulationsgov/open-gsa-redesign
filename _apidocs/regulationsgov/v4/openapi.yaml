#------------------
# Temporary Notes:
# nullable needs to be revisted.
# All date formats are part of description. I think we can remove that.
# TODO:  verify descriptions for attachments and display properties
#--------------------
openapi: 3.0.0
info:
  title: Regulations.gov API
  description: >-
    Public API for Regulations.gov
  version: "4.0"
servers:
  - url: 'https://api.regulations.gov/v4'
    description: Production endpoint for Regulations.gov API
security: 
  - ApiKeyAuth: []
paths:
  /documents:
    get:
      summary: List of documents
      description: This endpoint returns list of documents
      tags:
        - documents
      parameters: # we need one more filter added for frDocNum
        - name: api_key
          in: query
          required: true
          schema:
            type: string
            format: string
        - name: filter[agencyId]
          in: query
          description: >-
            'Filters results for the agency acronym specified in the value. Example: ''EPA'''
          required: false
          schema:
            type: string
            format: string
        - name: filter[commentEndDate]
          in: query
          description: >- # we might want to update our format here to accept 2017-07-21 format. 
            Filters results relative to the comment end date.  The value must be formatted as `MM-dd-yyyy`.<br/><br/> Omission of a parameter modifier will match results to the exact date provided, otherwise, one of the parameter modifiers below may be used: <br/> `ge` - greater than or equal <br/> `le` - less than or equal
          required: false
          schema:
            type: string
            #format: date - cannot add this format unless we update the format we accept for date.
        - name: filter[docketId]
          in: query
          description: >-
            Filters results on the specified docket ID.
          required: false
          schema:
            type: string
            format: string
        - name: filter[documentType]
          in: query
          description: >-
            Filters results on the specified document type.
          required: false
          schema:
            $ref: '#/components/schemas/DocumentType'
        - name: filter[searchTerm]
          in: query
          description: >-
            Filters results on the given term.
          required: false
          schema:
            type: string
            format: string
        - name: filter[postedDate]
          in: query
          description: >- # we might want to update our format here to accept 2017-07-21 format. 
            Filters results relative to the posted date.  The value must be formatted as `MM-dd-yyyy`.<br/><br/> Omission of a parameter modifier will match results to the exact date provided, otherwise, one of the parameter modifiers below may be used: <br/> `ge` - greater than or equal <br/> `le` - less than or equal
          required: false
          schema:
            type: string
            #format: date - cannot add this format unless we update the format we accept for date.
        - name: filter[subtype]
          in: query
          description: >-
            Filters results on the supplied document subtype
          required: false
          schema:
            type: string
            format: string
        - name: filter[withinCommentPeriod]
          in: query
          description: >-
            Filters results for documents that are open for comment by setting the value to `true`. <br/><br/> _`False` is not an acceptable value for this parameter, hence it should be removed when not being used._          
          required: false
          schema:
            type: boolean
        - name: sort
          in: query
          #update description and pull out possible values into an enum
          description: >-
            Sorts the results on the field specified in the value.  The default behavior will sort the results in ascending order; to sort in descending order, prepend a minus sign to the value. <br/><br/> Supported values are `commentEndDate`, `postedDate`, and `title`.          
          required: false
          schema:
            type: string
            format: string
        - name: page[number]
          in: query
          description: >-
            Specifies the number for the page of results that will be returned from the query. <br/><br/> Acceptable values are numerical between, and including, 1 and 20.          
          required: false
          schema:
            type: string
            format: string
        - name: size
          in: query
          description: >-
            Specifies the size per page of results that will be returned from the query. <br/><br/> Acceptable values are numerical between, and including, 5 and 250.           
          required: false
          schema:
            type: string
            format: string
      responses:
        '200':
          description: An array of documents
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Document'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
           description: API key is missing or invalid
           content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error' 
  /documents/{documentId}:
    get:
      tags:
        - documents
      summary: Get detailed information for specified documentId
      description: Gets the detailed information of a specific document with the passed documentId.
      parameters:
        - name: api_key
          in: query
          required: true
          schema:
            type: string
            format: string
        - name: documentId
          in: path
          description: ID of document to return
          required: true
          schema:
            type: string
        - name: include #This must be attachments
          in: query
          description: resources to include
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentDetail'            
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
           description: API key is missing or invalid
           content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Document not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /comments:
    get:
      summary: List of comments
      description: This endpoint returns list of comments 
      tags:
        - comments
      parameters: 
        - name: api_key
          in: query
          required: true
          schema:
            type: string
            format: string
        - name: filter[agencyId]
          in: query
          description: >-
            'Filters results for the agency acronym specified in the value. Example: ''EPA'''
          required: false
          schema:
            type: string
            format: string
        - name: filter[searchTerm]
          in: query
          description: >-
            Filters results on the given term.
          required: false
          schema:
            type: string
            format: string
        - name: filter[postedDate]
          in: query
          description: >- # we might want to update our format here to accept 2017-07-21 format. 
            Filters results relative to the posted date.  The value must be formatted as `MM-dd-yyyy`.<br/><br/> Omission of a parameter modifier will match results to the exact date provided, otherwise, one of the parameter modifiers below may be used: <br/> `ge` - greater than or equal <br/> `le` - less than or equal
          required: false
          schema:
            type: string
            #format: date - cannot add this format unless we update the format we accept for date.
        - name: filter[commentOnId]
          in: query
          description: >-
            Filters results on the supplied commentOnId
          required: false
          schema:
            type: string
        - name: sort
          in: query
          #update description and pull out possible values into an enum
          description: >-
            Sorts the results on the field specified in the value.  The default behavior will sort the results in ascending order; to sort in descending order, prepend a minus sign to the value. <br/><br/> Supported values are `commentEndDate`, `postedDate`, and `title`.          
          required: false
          schema:
            type: string
            format: string
        - name: page[number]
          in: query
          description: >-
            Specifies the number for the page of results that will be returned from the query. <br/><br/> Acceptable values are numerical between, and including, 1 and 20.          
          required: false
          schema:
            type: string
            format: string
        - name: size
          in: query
          description: >-
            Specifies the size per page of results that will be returned from the query. <br/><br/> Acceptable values are numerical between, and including, 5 and 250.           
          required: false
          schema:
            type: string
            format: string
      responses:
        '200':
          description: An array of comments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
           description: API key is missing or invalid
           content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error' 
  /comments/{documentId}:
    get:
      summary: Get detailed information for specified documentId
      description: Gets the detailed information of a specific document with the passed documentId.
      tags:
        - comments
      parameters:
        - name: api_key
          in: query
          required: true
          schema:
            type: string
            format: string
        - name: documentId
          in: path
          description: ID of document to return
          required: true
          schema:
            type: string
        - name: include
          in: query
          description: resources to include #attachments
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentDetail'            
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
           description: API key is missing or invalid
           content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Document not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Creates a new comment.
      tags:
        - comments
      parameters:
        - name: api_key
          in: query
          required: true
          schema:
            type: string
            format: string
        - name: documentId
          in: path
          description: ID of document the comment is being submitted to
          required: true
          schema:
            type: string
      requestBody:
        description: A JSON object containing comment information
        content:
          application/json:
            schema:
              oneOf:
              - $ref: '#/components/schemas/IndividualComment'
              - $ref: '#/components/schemas/AnonymousComment'
              - $ref: '#/components/schemas/OrganizationComment'
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentResponse'
          links:
            GetSubmitterKey:   # <---- arbitrary name for the link
              operationId: GetSubmitterKey
              parameters:
                userId: '$response.body#/submitterKey'
              description: >
                The `submitterKey` value returned in the response can be used as
                the `submitterKey` in `POST /comments/{documentId}`.  
            GetAgencyCategories:   # <---- arbitrary name for the link
              operationId: GetAgencyCategories
              parameters:
                userId: '$response.body#/category'
              description: >
                One of the `agencyCategories` value returned in the response can be used as
                the `category` in `POST /comments/{documentId}`.          
  /dockets:
    get:
      summary: List of dockets
      description: This endpoint returns list of dockets 
      tags:
        - dockets
      parameters:
        - name: api_key
          in: query
          required: true
          schema:
            type: string
            format: string
        - name: filter[agencyId]
          in: query
          description: >-
            'Filters results for the agency acronym specified in the value. Example: ''EPA'''
          required: false
          schema:
            type: string
            format: string
        - name: filter[searchTerm]
          in: query
          description: >-
            Filters results on the given term.
          required: false
          schema:
            type: string
            format: string
        - name: filter[docketType]
          in: query
          description: >-
            Filters results on the specified docket type.
          required: false
          schema:
            $ref: '#/components/schemas/DocketType'
        - name: sort
          in: query
          #update description and pull out possible values into an enum
          description: >-
            Sorts the results on the field specified in the value.  The default behavior will sort the results in ascending order; to sort in descending order, prepend a minus sign to the value. <br/><br/> Supported values are `commentEndDate`, `postedDate`, and `title`.          
          required: false
          schema:
            type: string
            format: string
        - name: page[number]
          in: query
          description: >-
            Specifies the number for the page of results that will be returned from the query. <br/><br/> Acceptable values are numerical between, and including, 1 and 20.          
          required: false
          schema:
            type: string
            format: string
        - name: size
          in: query
          description: >-
            Specifies the size per page of results that will be returned from the query. <br/><br/> Acceptable values are numerical between, and including, 5 and 250.           
          required: false
          schema:
            type: string
            format: string
      responses:
        '200':
          description: An array of dockets
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Docket'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
           description: API key is missing or invalid
           content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error' 
  /dockets/{docketId}:
    get:
      tags:
        - dockets
      summary: Get detailed information for specified docketId
      description: Gets the detailed information of a specific docket with the passed docketId.
      parameters:
        - name: api_key
          in: query
          required: true
          schema:
            type: string
            format: string
        - name: docketId
          in: path
          description: ID of docket to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocketDetail'            
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
           description: API key is missing or invalid
           content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Document not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /agencyCategories:
    get:
      summary: Returns a list of categories
      operationId: GetAgencyCategories
      description: This endpoint returns list of categories
      tags:
        - comments
      parameters:
        - name: api_key
          in: query
          required: true
          schema:
            type: string
            format: string
        - name: filter[agencyId]
          in: query
          description: >-
            'Filters results for the agency acronym specified in the value. Example: ''EPA'''
          required: true
          schema:
            type: string
            format: string 
      responses:
        200:
          description: List of agency categories
          content:
            application/json:
             schema:
                type: array
                items:
                  type: object
                  properties:
                    default:
                      type: boolean
                      description: Defines if its the default category value
                    acronym:
                      type: string
                      description: Agency acronym
                    categories:
                      type: string
                      description: The name of the category
  /submissionkeys:
    post:
      summary: Creates the unique submission key
      operationId: GetSubmitterKey
      tags:
        - comments
      parameters:
        - name: api_key
          in: query
          required: true
          schema:
            type: string
            format: string      
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubmissionKey'            
  
  /fileUploadUrl:
    post:
      summary: get a presigned url to upload file
      tags:
        - comments
      operationId: getUploadUrl
      description: 'Returns a pre-signed URL to upload a file to the S3 bucket'
      parameters:
        - name: api_key
          in: query
          required: true
          schema:
            type: string
            format: string
        - name: filename
          in: query
          description: The name of the file
          required: true
          schema:
            type: string
        - name: submissionKey
          in: query
          description: the submission key
          required: true
          schema:
            type: string
        - name: contentType
          in: query
          description: the content type
          required: true #?
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: object
                properties:
                  presigned_url:
                    type: string
                    format: uri
        '422':
          description: Validation error. A filename must be provided.
        '5XX':
          description: Unexpected error.
      callbacks: #do we need to document this?
        upload:   # Event name
          '{response.body#/presigned_url}':   # The callback URL,                                            # Refers to the passed URL
            put:
              description: >
                This callback is provided for the client to upload their dataset to 
                our S3 bucket using presigned_url provided in the response.
              requestBody:
                content:
                  application/octet-stream:
                    schema:
                      type: string
                      format: binary
              responses:   # Expected responses to the callback message
                '200':
                  description: File uploaded successfully
components:
  securitySchemes:
    ApiKeyAuth:        # arbitrary name for the security scheme
        type: apiKey
        in: query       # can be "header", "query" or "cookie"
        name: api_key  # name of the header, query parameter or cookie
  schemas:
    DocumentType:
      type: string
      description: type of document
      enum:
        - Notice
        - Rule
        - Proposed Rule
        - Supporting & Related Material
        - Other
    DocketType:
      type: string
      description: the type of docket
      enum:
        - Rulemaking
        - Nonrulemaking 
    SubmitterType:
      type: string
      description: the submitter type
      enum:
        - Anonymous
        - Individual
        - Organization
    FileFormat:
      type: object
      properties: 
        fileUrl:
          type: string
          description: URL of the file on S3
        format:
          type: string
          description: The format of the file such as `pdf`
        size:
          type: integer
          description: The file size
    Attachment:
      type: object
      properties:
        agencyNote:
          type: string
          description: The note by agency
        authors:
          type: array
          items:
            type: string
          description: The individual, organization, or group of collaborators that contributed to the creation of the attachment.
        docAbstract:
          type: string
          description: The detailed description of the attachment.
        docOrder:
          type: integer
          description: The order of the attachment
        fileFormats:
          type: array
          description: list of file formats
          items:
              $ref: '#/components/schemas/FileFormat'
        modifyDate:
          type: string
          format: date-time
          description: The date when the attachment was last modified.
        publication:
          type: string
          description: The publication date
        restrictReason:
          type: string
          description: If the attachment is restricted, this field will state the reason.
        restrictReasonType:
          type: string
          description: If the attachment is restricted, this field will state the type of restriction.
        title:
          type: string
          description: The formal title of the attachment
    DisplayProperty:
      type: object
      properties:
        name:
          type: string
          description: The name of the property
        label: 
          type: string
          description: The label of the property
        tooltip: 
          type: string
          description: The tooltip of the property      
    Document:
      type: object
      properties: # we might want to add numberOfCommentReceived here.
        agencyId:
          type: string
          description: The acronym used to abbreviate the name of the agency associated with the document.
        commentEndDate:
          type: string
          nullable: true
          format: date-time
          description: The date that closes the period when public comments may be submitted on the document.<br/><br/>The date is formatted as ISO 8601 with an offset such as `2019-01-20T13:15:45+01:00`.
        commentStartDate:
          type: string
          nullable: true
          format: date-time
          description: The date that begins the period when public comments may be submitted on the document.<br/><br/>The date is formatted as ISO 8601 with an offset such as `2019-01-20T13:15:45+01:00`.
        docketId:
          type: string
          description: The ID of the docket to which the document corresponds.
        documentId:
          type: string
          description: The unique identified of the document
        documentType:
          $ref: '#/components/schemas/DocumentType'
        highlightedContent:
          type: string
          nullable: true
          description: Content highlighted by the search index for the searchTerm
        openForComment:
          type: boolean
          description: Conveys if the document is open for comment
        postedDate:
          type: string
          description: The date that the document was posted by the agency to the system.<br/><br/>The date is formatted as ISO 8601 with an offset such as `2019-01-20T13:15:45+01:00`.
        subtype:
          type: string
          description: An agency-specific attribute to further categorize a document beyond the type (`documentType`).
        title:
          type: string
          description: The formal title of the document.
        withdrawn:
          type: boolean
          description: Conveys if the document is withdrawn
    Comment:
      type: object
      properties:
        agencyId:
          type: string
          description: The acronym used to abbreviate the name of the agency associated with the document.
        documentId:
          type: string
          description: The unique identified of the document
        documentType:
          $ref: '#/components/schemas/DocumentType'
        highlightedContent:
          type: string
          nullable: true
          description: Content highlighted by the search index for the searchTerm
        postedDate:
          type: string
          description: The date that the document was posted by the agency to the system.<br/><br/>The date is formatted as ISO 8601 with an offset such as `2019-01-20T13:15:45+01:00`.
        subtype:
          type: string
          description: An agency-specific attribute to further categorize a document beyond the type (`documentType`).
        title:
          type: string
          description: The formal title of the document.
        withdrawn:
          type: boolean
          description: Conveys if the document is withdrawn
    Docket:
      type: object
      properties:
        docketId:
          type: string
          description: The unique identified of the docket
        docketType:
          $ref: '#/components/schemas/DocketType'
        highlightedContent:
          type: string
          description: Content highlighted by search engine for the searchTerm. Only returned for searches with searchTerm.
        title:
          type: string
          description: The formal title of the docket.
    BasicDetailModel:
      type: object
      properties:
        address1:
          type: string
          nullable: true
          description: The first line of the submitter's address.
        address2:
          type: string
          nullable: true
          description: The second line of the submitter's address.
        agencyId:
          type: string
          description: The acronym used to abbreviate the name of the agency associated with the document.
        attachments:
          type: array
          description: list of attachments
          items: 
            $ref: '#/components/schemas/Attachment'
        city:
          type: string
          nullable: true
          description: The city associated with the submitter's address.
        commentCategory:
          type: string
          nullable: true
          description: An agency-specific category allowing agencies to group comments according to their type.
        content: # This will be renamed comment and we will add a content field to Document model per RGM-1031
          type: string
          nullable: true
          description: The content of a document that has originated from the [Federal Register](https://www.federalregister.gov/).
        country:
          type: string
          nullable: true
          description: The country associated with the submitter's address.
        displayProperties:
          type: array
          description: list of display properties
          items:
            $ref: '#/components/schemas/DisplayProperty'
        docAbstract:
          type: string
          description: The detailed description of the document.
        docketId:
          type: string
          description: The ID of the docket to which the document corresponds.
        documentType:
          $ref: '#/components/schemas/DocumentType'
        email:
          type: string
          nullable: true
          description: The submitter's e-mail address.
        fax:
          type: string
          nullable: true
          description: The submitter's fax number.
        field1:
          type: string
          nullable: true
          description: An agency-specific field used for storing additional data with the document.
        field2:
          type: string
          nullable: true
          description: An agency-specific field used for storing additional data with the document.
        fileFormats:
          type: array
          description: list of file formats
          items:
            $ref: '#/components/schemas/FileFormat'
        firstName:
          type: string
          nullable: true
          description: The submitter's first name.
        govAgency:
          type: string
          nullable: true
          description: The name of the government agency that the submitter represents.
        govAgencyType:
          type: string
          nullable: true
          description: The type of government agency that the submitter represents.
        objectId:
          type: string
          description: The unique Regulations.gov ID associated with the document.  This value is often expected for internal use only.
        lastName:
          type: string
          nullable: true
          description: The submitter's last name.
        legacyId:
          type: string
          nullable: true
          description: An agency-specific identifier that was given to the document in the legacy system.
        modifyDate:
          type: string
          format: date-time
          description: The date when the document was last modified.<br/><br/>The date is formatted as ISO 8601 with an offset such as `2019-01-20T13:15:45+01:00`.
        organization:
          type: string
          nullable: true
          description: The organization that the submitter represents.
        originalDocumentId:
          type: string
          description: The document ID that was assigned when first entered into the system should a change occur that requires a new document ID to be assigned.
        pageCount:
          type: string
          description: Conveys the number of pages contained in the document.
        phone:
          type: string
          nullable: true
          description: The submitter's phone number.
        postedDate:
          type: string
          format: date-time
          description: The date that the document was posted by the agency to the system.<br/><br/>The date is formatted as ISO 8601 with an offset such as `2019-01-20T13:15:45+01:00`.
        postmarkDate:
          type: string
          format: date-time
          description: The postmark date of a document that was sent by mail.<br/><br/>The date is formatted as ISO 8601 with an offset such as `2019-01-20T13:15:45+01:00`.
        reasonWithdrawn:
          type: string
          description: If the document is withdrawn, this field will state the reason.
        subtype:
          type: string
          description: An agency-specific attribute to further categorize a document beyond the documentType.
    DocumentDetail:
      allOf:     # Combines the BasicDetailModel and the inline model
        - $ref: '#/components/schemas/BasicDetailModel'
        - type: object
          required:
            - documentId
          properties: 
            additionalRins:
              type: array
              items:
                type: string
              description: One or more Regulatory Information Numbers (RINs) to which the document relates.
            allowLateComments:
              type: boolean
              description: Indicates whether the owning agency will accept comments on the document after the due date.
            authorDate:
              type: string
              format: date-time
              description: The date that the authors wrote or published the document.<br/><br/>The date is formatted as ISO 8601 with an offset such as `2019-01-20T13:15:45+01:00`.
            authors:
              type: array
              items:
                type: string
              description: The individual, organization, or group of collaborators that contributed to the creation of the document.
            cfrPart:
              type: string
              description: The Code of Federal Regulations (CFR) Citation applicable to the document.
            commentEndDate:
              type: string
              nullable: true
              format: date-time
              description: The date that closes the period when public comments may be submitted on the document.<br/><br/>The date is formatted as ISO 8601 with an offset such as `2019-01-20T13:15:45+01:00`.
            commentStartDate:
              type: string
              nullable: true
              format: date-time
              description: The date that begins the period when public comments may be submitted on the document.<br/><br/>The date is formatted as ISO 8601 with an offset such as `2019-01-20T13:15:45+01:00`.
            documentId:
              type: string
              description: The unique identified of the document
            effectiveDate:
              type: string
              format: date-time
              description: The date the document is put into effect.<br/><br/>The date is formatted as ISO 8601 with an offset such as `2019-01-20T13:15:45+01:00`.
            exhibitLocation:
              type: string
              description: The physical location of an exhibit to which a document refers.
            exhibitType:
              type: string
              description: The type of exhibit to which a document refers.
            frDocNum:
              type: string
              description: The unique identifier of a document originating in the [Federal Register](https://www.federalregister.gov/).
            frVolNum:
              type: string
              description: The [Federal Register](https://www.federalregister.gov/) volume number where the document was published.
            implementationDate:
              type: string
              format: date-time
              description: The date the document is to be implemented.<br/><br/>The date is formatted as ISO 8601 with an offset such as `2019-01-20T13:15:45+01:00`.
            openForComment:
              type: boolean
              description: Conveys if a document is open for comment.
            media:
              type: string
              description: The media in which the document is stored.
            ombApproval:
              type: string
              description: The control number assigned when approval is given by the Office of Management and Budget (OMB) in accordance with the Paperwork Reduction Act (PRA).
            paperLength:
              type: integer
              description: When the document is in paper format, indicates the length of the paper.
            paperWidth:
              type: integer
              description: When the document is in paper format, indicates the width of the paper.
            regWriterInstruction:
              type: string
              description: Additional instructions provided by the writer of the regulation.
            sourceCitation:
              type: string
              description: The citation for the source that published the document.
            startEndPage:
              type: string
              description: The starting and ending pages where the document was published.
            subject:
              type: string
              description: The subject of the document.
            topics:
              type: array
              items:
                type: string
              description: The principal topics to which the document pertains.
    CommentDetail: 
      allOf:     # Combines the BasicDetailModel and the inline model
        - $ref: '#/components/schemas/BasicDetailModel'
        - type: object
          required:
            - documentId
          properties: 
            commentOn: #we may want to hide this - this is used to get the comment counts maybe?
              type: string
              description: objectId of the parent document
            commentOnDocumentId:
              type: string
              description: documentId of the parent document
            documentId:
              type: string
              description: The unique identified of the document
            duplicateComments:
              type: integer
              description: Number of duplicate comments
    DocketDetail:
      type: object
      properties:
        agencyId:
          type: string
          description: The acronym used to abbreviate the name of the agency associated with the docket.
        category:
          type: string
          nullable: true
          description: Agency specific docket category providing regulatory action details, status, and the agency program and or office.
        displayProperties:
          type: array
          description: list of display properties
          items:
            $ref: '#/components/schemas/DisplayProperty'
        dkAbstract:
          type: string
          description: The detailed description of the docket.
        docketId:
          type: string
          description: The ID of the docket.
        docketType:
          $ref: '#/components/schemas/DocketType'
        effectiveDate:
          type: string
          format: date-time
          description: The date the docket is put into effect.<br/><br/>The date is formatted as ISO 8601 with an offset such as `2019-01-20T13:15:45+01:00`.
        field1:
          type: string
          description: An agency-specific field used for storing additional data with the docket.
        field2:
          type: string
          nullable: true
          description: An agency-specific field used for storing additional data with the docket.
        generic:
          type: string
          nullable: true
          description: An agency-specific field used for storing additional data with the docket.
        objectId:
          type: string
          description: The unique Regulations.gov ID associated with the docket.  This value is often expected for internal use only.
        keywords:
          type: array
          items:
            type: string
            description: Agency selected keywords associated with a docket to improve its searchability by the public.
        legacyId:
          type: string
          nullable: true
          description: An agency-specific identifier that was given to the docket in the legacy system.
        modifyDate:
          type: string
          format: date-time
          description: The date when the docket was last modified.<br/><br/>The date is formatted as ISO 8601 with an offset such as `2019-01-20T13:15:45+01:00`.
        organization:
          type: string
          description: Identifies docket's (a regulatory action) orginating agency and/or department.
        petitionNbr:
          type: string
          description: Agency specific identifier associated with a docket.
        program:
          type: string
          description: The agency specific program associated with the docket.
        regulatoryActionInfo: #should this be a relationship with include?
            $ref: '#/components/schemas/RegulatoryActionInfo'
        rin:
          type: string
          description: OMB issued Regulation Identifier Number (RIN) uniquely identifies a docket and its documents.
        shortTitle:
          type: string
          description: A combination of letters and or numbers assigned to an agency's regulatory action for purposes of brevity.
        subType:
          type: string
          description: This agency specific attribute characterizes a docket (regulatory action) beyond its assigned docket type, e.g., Rulemaking.
        subType2:
          type: string
          description: This agency specific attribute characterizes a docket (regulatory action) beyond the designated docket subtype.
        title:
          type: string
          description: A name or descriptive heading given to an agency's docket.
    IndividualComment:
      allOf:     # Combines the BasicCommentPayLoad and the inline model
        - $ref: '#/components/schemas/BaseCommentPayload'
        - type: object
          required:
            - submitterType
            - firstName
            - lastName
          properties:
            city:
              type: string
              description: The city associated with the submitter's address.
            country:
              type: string
              description: The country associated with the submitter's address.
            firstName:
              type: string
              description: The submitter's first name.
            lastName:
              type: string
              description: The submitter's last name.
            phone:
              type: string
              description: The submitter's phone number.
            stateProvinceRegion:
              type: boolean
              description: The email associated with the submitter's address.
            submitterRep: # we should not have this field
              type: string
              description: The submitter representative 
            submitterType:
              type: string
              description: The submitter type
              example: Individual
            zip:
              type: string
              description: The zip associated with the submitter's address.
    OrganizationComment: 
      allOf:     # Combines the BasicCommentPayLoad and the inline model
        - $ref: '#/components/schemas/BaseCommentPayload'
        - type: object
          required:
            - submitterType
            - organization
            - organizationType
          properties:
            organization:
              type: string
              description: The organization that the submitter represents.          
            organizationType:
              type: string
              description: The agency specific organization type that the submitter represents.          
            submitterType:
              type: string
              description: The submitter type
              example: Organization
    AnonymousComment: 
      allOf:     # Combines the BasicCommentPayLoad and the inline model
        - $ref: '#/components/schemas/BaseCommentPayload'
        - type: object
          required:
            - submitterType
          properties: 
            submitterType:
              type: string
              description: The submitter type
              example: Anonymous
    BaseCommentPayload:
      type: object
      required:
        - comment
        - submissionKey
        - commentOnDocumentId
        - submissionType #user should set submission Type to API
      properties:
        category:
          type: string
          description: An agency-specific category allowing agencies to group comments according to their type.
        comment:
          type: string
          description: The comment text
        commentOnDocumentId: #we may want to hide this
          type: string
          description: documentId of the parent document
        email:
          type: string
          description: The email address to receive email receipt for the commenrt
        files:
          type: array
          items:
            type: string
          description: The names of the files submitted with the submission
        sendEmailReceipt:
          type: boolean
          description: Conveys if the user would like to receive an email receipt for the comment
        submissionKey:
          type: string
          description: The unique identifier associated with the submission
        submissionType:
          type: string
          description: The submitter type - Its always going to be API for comments submitted via API 
    CommentResponse: 
      allOf:
        - oneOf:     # Returns the created comment
          - $ref: '#/components/schemas/IndividualComment'
          - $ref: '#/components/schemas/OrganizationComment'
          - $ref: '#/components/schemas/AnonymousComment'
        - type: object
          properties:
            commentTrackingNumber:
              type: string
              description: comment tracking number of the comment #user will not have this. This is recieved by them.
            numItemsReceived: #Again, look this up - no need to document this maybe?
              type: integer
              description: The number of items included in the submission          
            receiveDate: 
              type: string
              description: The date comment was received.          
    SubmissionKey:
      type: object
      properties:
        submissionKey:
          type: string
          description: The unique identifier needed to submit a comment
    RegulatoryActionInfo:
      type: object
      properties:
        rin:
          type: string
        cfr:
          type: array
          items:
            type: string
        contact:
          type: array
          items:
            $ref: '#/components/schemas/Contact'
        abstractText:
          type: string
        energyEffected:
          type: string
        execOrder1377Designation:
          type: string
        federalism:
          type: string
        govtLevel:
          type: array
          items:
            type: string
        internationalInterest:
          type: string
        legalAuthority:
          type: array
          items:
            type: string
        legalDeadline: #shouldnt it be named legalDeadlines?
          type: array
          items:
            $ref: '#/components/schemas/LegalDeadline'
        major:
          type: string
        priorityCategory:
          type: string
        publicationPeriod:
          type: string
        relatedRin: #shouldnt it be named in plural?
          type: array
          items:
            type: string
        regulatoryPlan:
          type: string
        rfaRequired:
          type: string
        ruleStage:
          type: string
        ruleTitle:
          type: string
        smallEntity:
          type: array
          items:
            type: string
        timetable:
          type: array
          items: #shouldnt it be named in plural?
            $ref: '#/components/schemas/TimeTable'
        unfundedMandate:
          type: string
    MailingAddress:
      type: object
      properties:
        streetAddress:
          type: string
        city:
          type: string
        state: 
          type: string
        zip: 
          type: string
    Contact:
      type: object
      properties:
        firstName:
          type: string
        lastName: 
          type: string
        middleName:
          type: string
        prefix:
          type: string
        suffix: 
          type: string
        title: 
          type: string
        phone: 
          type: string
        phoneExt:
          type: string
        tddPhone:
          type: string
        fax:
          type: string
        email:
          type: string
        mailingAddress: #shouldnt it be named legalDeadlines?
          $ref: '#/components/schemas/MailingAddress'
    LegalDeadline:
      type: object
      properties:
        action:
          type: string
        source: 
          type: string
        description:
          type: string
        date: 
          type: string
    TimeTable:
      type: object
      properties:
        action:
          type: string
        date: 
          type: string
        frCitation:
          type: string
    Error:
      type: object
      properties:
        status:
          type: integer #http status code
        title:
          type: string
        detail:
          type: string
